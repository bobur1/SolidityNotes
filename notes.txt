//Todo::make it readable in MD format
uint - unsigned integer (=uint256)

----------------------------------------------------
Math operations:

standard: + - * / %

% - modulus
** - power like 2^3 = 2**3 = 8

----------------------------------------------------
Struct:

struct Person {
  uint age;
  string name;
}
----------------------------------------------------
Array:

// Array with a fixed length of 2 elements:
uint[2] fixedArray;
// another fixed Array, can contain 5 strings:
string[5] stringArray;
// a dynamic Array - has no fixed size, can keep growing:
uint[] dynamicArray;

You can declare an array as public, and Solidity will automatically create a getter method for it. 
The syntax looks like:

Person[] public people;

uint[] numbers;
numbers.push(5); //adding new value to the array (will add to the end of our array)
numbers.push(10);
numbers.push(15);
// numbers is now equal to [5, 10, 15]


array.push() - returns a uint of the new length of the array 
- and since the first item in an array has index 0, 
array.push() - 1 will be the index of the zombie we just added

Note: memory arrays must be created with a length argument.
They currently cannot be resized like storage arrays can with array.push(), 
although this may be changed in a future version of Solidity.

  // Instantiate a new array in memory with a length of 3
  uint[] memory values = new uint[](3);

  // Put some values to it
  values[0] = 1;
  values[1] = 2;

----------------------------------------------------
Array of the Struct:
struct Person {
  uint age;
  string name;
}

Person[] public people;

// create a New Person:
Person satoshi = Person(172, "Satoshi");

// Add that person to the Array:
people.push(satoshi);

----------------------------------------------------

Functions:

View - it's only viewing the data but not modifying it:

function sayHello() public view returns (string memory) {
	return greeting;
}

Pure - you're not even accessing any data in the app. Consider the following (no gass using):

function _multiply(uint a, uint b) private pure returns (uint) {
  return a * b;
}

**Note: It may be hard to remember when to mark functions as pure/view. 
Luckily the Solidity compiler is good about issuing warnings to let you know when you should use 
one of these modifiers.

1. Public - This means anyone (or any other contract) can call your contract's function and 
execute its code.
 function createZombie (string memory _name, uint _dna) public {
	// some logic here
 }
 
2. Private - only other functions within our contract will be able to call this function.
function _addToArray(uint _number) private {
  // some logic here
}
**Note: it's convention to start private function names with an underscore (_).

3. Internal is the same as private, except that it's also accessible 
to contracts that inherit from this contract.

4. External is similar to public, except that these functions can ONLY be called outside the contract 
— they can't be called by other functions inside that contract. 

5. Fallback Function - function()

called when a transaction without a function-call is sent to the smart contract
called when the function-call in the transaction isn't found
can only be external

----------------------------------------------------

Function Modifiers

A function modifier looks just like a function, but uses the keyword modifier instead 
of the keyword function. And it can't be called directly like a function can — instead we can 
attach the modifier's name at the end of a function definition to change that function's behavior.

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(isOwner());
    _;
  }
  
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

When you call renounceOwnership, the code inside onlyOwner executes first. Then when it hits 
the _; statement in onlyOwner, it goes back and executes the code inside renounceOwnership.


The payable Modifier

payable functions are part of what makes Solidity and Ethereum so cool — they are a special type 
of function that can receive Ether.

----------------------------------------------------

Keccak256:
Ethereum has the hash function keccak256 built in, which is a version of SHA3. 
A hash function basically maps an input into a random 256-bit hexadecimal number. 
A slight change in the input will cause a large change in the hash.

//6e91ec6b618bb462a4a6ee5aa2cb0e9cf30f7a052bb467b0ba58b8748c00d2e5
keccak256(abi.encodePacked("aaaab"));
//b1f078126895a1424524de5321b339ab00408010b7cf0e6ed451514981e58aa9
keccak256(abi.encodePacked("aaaac"));

----------------------------------------------------

Typecasting(convert between data types):
uint8 a = 5;
uint b = 6;
// throws an error because a * b returns a uint, not uint8:
uint8 c = a * b;
// we have to typecast b as a uint8 to make it work:
uint8 c = a * uint8(b);

----------------------------------------------------

Events:
Events are a way for your contract to communicate that something happened on 
the blockchain to your app front-end, which can be 'listening' for certain 
events and take action when they happen.

// declare the event
event IntegersAdded(uint x, uint y, uint result);

function add(uint _x, uint _y) public returns (uint) {
  uint result = _x + _y;
  // fire an event to let the app know the function was called:
  emit IntegersAdded(_x, _y, result);
  return result;
}

----------------------------------------------------

Address:
Each Ethereum account has an address, which you can think of like a bank account number. It's a unique identifier that points to that account, and it looks like this:

0x0cE446255506E92DF41614C46F1d6df9Cc969183


----------------------------------------------------

Mappings

In Lesson 1 we looked at structs and arrays. 
Mappings are another way of storing organized data in Solidity.

// For a financial app, storing a uint that holds the user's account balance:
mapping (address => uint) public accountBalance;
// Or could be used to store / lookup usernames based on userId
mapping (uint => string) userIdToName;

----------------------------------------------------

msg.sender

In Solidity, there are certain global variables that are available to all functions. 
One of these is msg.sender, which refers to the address of the person (or smart contract) 
who called the current function.

mapping (address => uint) favoriteNumber;

function setMyNumber(uint _myNumber) public {
  // Update our `favoriteNumber` mapping to store `_myNumber` under `msg.sender`
  favoriteNumber[msg.sender] = _myNumber;
  // ^ The syntax for storing data in a mapping is just like with arrays
}

function whatIsMyNumber() public view returns (uint) {
  // Retrieve the value stored in the sender's address
  // Will be `0` if the sender hasn't called `setMyNumber` yet
  return favoriteNumber[msg.sender];
}

----------------------------------------------------

Require: 
require makes it so that the function will throw an error 
and stop executing if some condition is not true

Assert:
assert is similar to require, where it will throw an error if false. 
The difference between assert and require is that require will refund the user the 
rest of their gas when a function fails, whereas assert will not. 
So most of the time you want to use require in your code; assert is typically 
used when something has gone horribly wrong with the code (like a uint overflow).

----------------------------------------------------

Time units

Solidity provides some native units for dealing with time.

The variable now will return the current unix timestamp of the latest block 
(the number of seconds that have passed since January 1st 1970).

----------------------------------------------------

Inheritance:
contract Doge {
  function catchphrase() public returns (string memory) {
    return "So Wow CryptoDoge";
  }
}

contract BabyDoge is Doge {
  function anotherCatchphrase() public returns (string memory) {
    return "Such Moon BabyDoge";
  }
}

BabyDoge inherits from Doge. 
That means if you compile and deploy BabyDoge, it will have access to both catchphrase() 
and anotherCatchphrase() (and any other public functions we may define on Doge).

----------------------------------------------------

Storage vs Memory:
Storage refers to variables stored permanently on the blockchain. Memory variables are temporary,
and are erased between external function calls to your contract. Think of it like your computer's 
hard disk vs RAM.

by default storage and written permanently to the blockchain, while variables declared inside functions 
are memory and will disappear when the function call ends.

contract SandwichFactory {
  struct Sandwich {
    string name;
    string status;
  }

  Sandwich[] sandwiches;

  function eatSandwich(uint _index) public {
    // Sandwich mySandwich = sandwiches[_index];

    // ^ Seems pretty straightforward, but solidity will give you a warning
    // telling you that you should explicitly declare `storage` or `memory` here.

    // So instead, you should declare with the `storage` keyword, like:
    Sandwich storage mySandwich = sandwiches[_index];
    // ...in which case `mySandwich` is a pointer to `sandwiches[_index]`
    // in storage, and...
    mySandwich.status = "Eaten!";
    // ...this will permanently change `sandwiches[_index]` on the blockchain.

    // If you just want a copy, you can use `memory`:
    Sandwich memory anotherSandwich = sandwiches[_index + 1];
    // ...in which case `anotherSandwich` will simply be a copy of the 
    // data in memory, and...
    anotherSandwich.status = "Eaten!";
    // ...will just modify the temporary variable and have no effect 
    // on `sandwiches[_index + 1]`. But you can do this:
    sandwiches[_index + 1] = anotherSandwich;
    // ...if you want to copy the changes back into blockchain storage.
  }
}

----------------------------------------------------

Saving Gas With 'View' Functions

view functions don't cost any gas when they're called externally by a user.

----------------------------------------------------

Storage is Expensive

One of the more expensive operations in Solidity is using storage — particularly writes.

----------------------------------------------------

natspec - The standard in the Solidity community is to use a comment format
@title and @author are straightforward.

@notice explains to a user what the contract / function does. 
@dev is for explaining extra details to developers.

@param and @return are for describing what each parameter and return value of a function are for.

/// @title A contract for basic math operations
/// @author H4XF13LD MORRIS 💯💯😎💯💯
/// @notice For now, this contract just adds a multiply function
contract Math {
  /// @notice Multiplies 2 numbers together
  /// @param x the first uint.
  /// @param y the second uint.
  /// @return z the product of (x * y)
  /// @dev This function does not currently check for overflows
  function multiply(uint x, uint y) returns (uint z) {
    // This is just a normal comment, and won't get picked up by natspec
    z = x * y;
  }
}

----------------------------------------------------

Libraries(take a look):

OpenZeppelin's Ownable contract:

OpenZeppelin is a library of secure and community-vetted smart contracts that you can use 
in your own DApps.

The Ownable contract has an owner address, and provides basic authorization control

OpenZeppelin ERC721

OpenZeppelin has created a library called SafeMath

----------------------------------------------------

Problems:

Random number generator:
 You can read this StackOverflow thread for some ideas. https://ethereum.stackexchange.com/questions/191/how-can-i-securely-generate-a-random-number-in-my-smart-contract
 One idea would be to use an oracle to access a random number function from outside 
 of the Ethereum blockchain.


Tokens on Ethereum

A token on Ethereum is basically just a smart contract that follows some common rules — namely it 
implements a standard set of functions that all other token contracts share, such as 
transferFrom(address _from, address _to, uint256 _tokenId) and balanceOf(address _owner).

ERC20 tokens are really cool for tokens that act like currencies. 
But they're not particularly useful for representing zombies in our zombie game.

ERC721 tokens are not interchangeable since each one is assumed to be unique, and are not divisible. 
You can only trade them in whole units, and each one has a unique ID.
OpenZeppelin ERC721 

----------------------------------------------------

Call solidity code in front end
//sol code
function createRandomZombie(string _name) public {
  require(ownerZombieCount[msg.sender] == 0);
  uint randDna = _generateRandomDna(_name);
  randDna = randDna - randDna % 100;
  _createZombie(_name, randDna);
}

//script

function createRandomZombie(name) {
  // This is going to take a while, so update the UI to let the user know
  // the transaction has been sent
  $("#txStatus").text("Creating new zombie on the blockchain. This may take a while...");
  // Send the tx to our contract:
  return cryptoZombies.methods.createRandomZombie(name)
  .send({ from: userAccount })
  .on("receipt", function(receipt) {
    $("#txStatus").text("Successfully created " + name + "!");
    // Transaction was accepted into the blockchain, let's redraw the UI
    getZombiesByOwner(userAccount).then(displayZombies);
  })
  .on("error", function(error) {
    // Do something to alert the user their transaction has failed
    $("#txStatus").text(error);
  });
}